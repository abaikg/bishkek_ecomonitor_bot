# main.py
import logging
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes, CallbackQueryHandler
)
from config import TELEGRAM_BOT_TOKEN, AQICN_API_KEY
from handlers.start import start_command
from handlers.air_quality import (
    aqi_command, # <<< –ò–ó–ú–ï–ù–ï–ù–û: –≤–º–µ—Å—Ç–æ get_air_quality_by_location –∏ request_location_by_name
    handle_location_input, # <<< –ò–ó–ú–ï–ù–ï–ù–û: –≤–º–µ—Å—Ç–æ handle_location_name_input
    handle_location_selection,
    GET_LOCATION_FOR_AQI # <<< –ò–ó–ú–ï–ù–ï–ù–û: –Ω–æ–≤–æ–µ –∏–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
)
from handlers.info import show_recommendations, show_about_bot
from handlers.subscriptions import (
    subscribe_command,
    handle_sub_location,
    handle_sub_threshold,
    unsubscribe_command,
    my_subscriptions_command,
    GET_SUB_LOCATION,
    GET_SUB_THRESHOLD
)
from database import db
from utils.air_quality_api import get_air_quality_data
from utils.markdown_helpers import escape_markdown_v2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞ AQICN –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if not AQICN_API_KEY:
    logger.critical("AQICN_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞.")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
def _get_aqi_category_for_notifications(aqi: int) -> tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è AQI."""
    if aqi <= 50:
        return "–•–æ—Ä–æ—à–æ", "üü¢"
    elif aqi <= 100:
        return "–£–º–µ—Ä–µ–Ω–Ω–æ", "üü°"
    elif aqi <= 150:
        return "–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø", "üü†"
    elif aqi <= 200:
        return "–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ", "üî¥"
    elif aqi <= 300:
        return "–û—á–µ–Ω—å –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ", "üü£"
    else:
        return "–û–ø–∞—Å–Ω–æ", "üü§"


async def send_aqi_notifications(context: ContextTypes.DEFAULT_TYPE):
    """–§–æ–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞.")
    subscriptions = db.get_all_active_subscriptions()
    if not subscriptions:
        logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    for sub in subscriptions:
        user_id = sub['user_id']
        chat_id = sub['chat_id']
        latitude = sub['latitude']
        longitude = sub['longitude']
        location_name = sub['location_name']
        aqi_threshold = sub['aqi_threshold']
        last_notified_aqi = sub['last_notified_aqi']

        try:
            current_air_data = await get_air_quality_data(latitude, longitude)
            if not current_air_data or current_air_data.get('overall_aqi') is None:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AQI –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {user_id} –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ {location_name}.")
                continue

            current_aqi = current_air_data['overall_aqi']
            category, emoji = _get_aqi_category_for_notifications(current_aqi)

            should_notify = False
            if aqi_threshold is not None and current_aqi >= aqi_threshold:
                if last_notified_aqi is None or current_aqi >= last_notified_aqi + 20 or current_aqi <= last_notified_aqi - 20:
                    should_notify = True
            elif aqi_threshold == 0:
                 if last_notified_aqi is None or abs(current_aqi - last_notified_aqi) >= 15:
                     should_notify = True


            if should_notify:
                report_text = (
                    f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞*\n\n"
                    f"**–õ–æ–∫–∞—Ü–∏—è:** {escape_markdown_v2(location_name)}\n"
                    f"**–¢–µ–∫—É—â–∏–π AQI:** `{escape_markdown_v2(str(current_aqi))}` {emoji} \\({escape_markdown_v2(category)}\\)\n"
                    f"üìÖ –í—Ä–µ–º—è –¥–∞–Ω–Ω—ã—Ö: `{escape_markdown_v2(current_air_data.get('local_time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}`\n\n"
                    "‚ÑπÔ∏è –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /airquality"
                )
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=report_text,
                    parse_mode='MarkdownV2'
                )
                db.update_last_notified_aqi(user_id, current_aqi)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è {location_name} (AQI: {current_aqi}).")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    db.init_db()

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start_command))

    # ConversationHandler –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AQI
    # –¢–µ–ø–µ—Ä—å –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∫—É –ª–æ–∫–∞—Ü–∏–∏, —Ç–∞–∫ –∏ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
    aqi_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üìä –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ —Å–µ–π—á–∞—Å$"), aqi_command), # –ö–Ω–æ–ø–∫–∞ "–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ —Å–µ–π—á–∞—Å"
            MessageHandler(filters.LOCATION, aqi_command), # –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
            MessageHandler(filters.Regex("^üîé –ù–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é$"), aqi_command) # –ö–Ω–æ–ø–∫–∞ "–ù–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
        ],
        states={
            GET_LOCATION_FOR_AQI: [
                MessageHandler(filters.LOCATION, handle_location_input),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_location_input),
                CallbackQueryHandler(handle_location_selection, pattern="^select_location_.*|^cancel_selection$")
            ],
        },
        fallbacks=[CommandHandler("cancel", start_command)],
    )
    application.add_handler(aqi_conv_handler)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìä –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ —Å–µ–π—á–∞—Å",
    # —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ç–µ–ø–µ—Ä—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ aqi_conv_handler
    # application.add_handler(MessageHandler(filters.Regex("^üìä –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ —Å–µ–π—á–∞—Å$"), 
    #                                        lambda update, context: update.message.reply_text(
    #                                            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, **–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é** "
    #                                            "—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É —Å–∫—Ä–µ–ø–∫–∏ (—Å–∫—Ä–µ–ø–∫–∞ > –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è) –∏–ª–∏ **–Ω–∞–∂–º–∏—Ç–µ '–ù–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é'** –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞."
    #                                        )))


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" –∏ "–û –±–æ—Ç–µ"
    application.add_handler(MessageHandler(filters.Regex("^üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏$"), show_recommendations))
    application.add_handler(MessageHandler(filters.Regex("^‚ùì –û –±–æ—Ç–µ$"), show_about_bot))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    sub_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è$"), subscribe_command)],
        states={
            GET_SUB_LOCATION: [
                MessageHandler(filters.LOCATION, handle_sub_location),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sub_location)
            ],
            GET_SUB_THRESHOLD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sub_threshold)]
        },
        fallbacks=[CommandHandler("cancel", start_command)]
    )
    application.add_handler(sub_conv_handler)
    application.add_handler(MessageHandler(filters.Regex("^üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è$"), unsubscribe_command))
    application.add_handler(MessageHandler(filters.Regex("^üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏$"), my_subscriptions_command))

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    application.job_queue.run_repeating(send_aqi_notifications, interval=1800, first=60)
    logger.info("–ó–∞–¥–∞—á–∞ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")


    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
