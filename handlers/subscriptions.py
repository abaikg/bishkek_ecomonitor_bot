# handlers/subscriptions.py
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton # <<< –î–æ–±–∞–≤–ª–µ–Ω–æ Update
from telegram.ext import ContextTypes, ConversationHandler
from database import db
from utils.air_quality_api import get_air_quality_data
from utils.geo_utils import geocode_address
from utils.markdown_helpers import escape_markdown_v2
import logging

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_SUB_LOCATION = 1
GET_SUB_THRESHOLD = 2

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏."""
    await update.message.reply_text(
        "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
        "**–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é** —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É —Å–∫—Ä–µ–ø–∫–∏ (—Å–∫—Ä–µ–ø–∫–∞ > –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è) –∏–ª–∏ **–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞/—É–ª–∏—Ü—ã**.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–∂–∞–≤ /cancel."
    )
    return GET_SUB_LOCATION

async def handle_sub_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    latitude, longitude, location_name = None, None, None

    if update.message.location:
        latitude = update.message.location.latitude
        longitude = update.message.location.longitude
        location_name = "–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è"
        await update.message.reply_text(f"–ü–æ–ª—É—á–µ–Ω–∞ –≤–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è. {location_name}.")
    elif update.message.text:
        input_location = update.message.text
        
        coords_list = await geocode_address(input_location, limit=1)
        
        if coords_list:
            latitude, longitude, location_name = coords_list[0]
            await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {escape_markdown_v2(location_name)}.")
        else:
            await update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é –ª–æ–∫–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é."
            )
            return GET_SUB_LOCATION

    if latitude is not None and longitude is not None:
        context.user_data['sub_latitude'] = latitude
        context.user_data['sub_longitude'] = longitude
        context.user_data['sub_location_name'] = location_name

        current_air_data = await get_air_quality_data(latitude, longitude)
        if current_air_data and current_air_data.get('overall_aqi') is not None:
            current_aqi = current_air_data['overall_aqi']
            category, _ = _get_aqi_category(current_aqi)
            await update.message.reply_text(
                f"–¢–µ–∫—É—â–∏–π AQI –¥–ª—è {escape_markdown_v2(location_name)}: **{escape_markdown_v2(str(current_aqi))}** \\({escape_markdown_v2(category)}\\).\n"
                "–ü—Ä–∏ –∫–∞–∫–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ AQI –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? "
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, 100\\) –∏–ª–∏ 0, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\\."
            )
        else:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ AQI –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏. "
                "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (/cancel)."
            )
        return GET_SUB_THRESHOLD
    
    return GET_SUB_LOCATION

async def handle_sub_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ AQI –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É."""
    try:
        aqi_threshold = int(update.message.text)
        if aqi_threshold < 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ—Ä–æ–≥–∞ AQI (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100) –∏–ª–∏ 0."
        )
        return GET_SUB_THRESHOLD

    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    latitude = context.user_data.get('sub_latitude')
    longitude = context.user_data.get('sub_longitude')
    location_name = context.user_data.get('sub_location_name', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")

    if latitude is None or longitude is None:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –ª–æ–∫–∞—Ü–∏–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å–Ω–æ–≤–∞ (/subscribe).")
        return ConversationHandler.END

    db.add_subscription(user_id, chat_id, latitude, longitude, location_name, aqi_threshold)
    await update.message.reply_text(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –¥–ª—è {escape_markdown_v2(location_name)}. "
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ AQI –æ—Ç **{escape_markdown_v2(str(aqi_threshold))}** –∏ –≤—ã—à–µ (–∏–ª–∏ –ø—Ä–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ 0)."
    )
    context.user_data.pop('sub_latitude', None)
    context.user_data.pop('sub_longitude', None)
    context.user_data.pop('sub_location_name', None)

    return ConversationHandler.END

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    if db.remove_subscription(user_id):
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")

async def my_subscriptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    subscription = db.get_subscription(user_id)
    if subscription:
        text = f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:\n\n"
        text += f"**–õ–æ–∫–∞—Ü–∏—è:** {escape_markdown_v2(subscription['location_name'])}\n"
        
        aqi_threshold_text = f"{subscription['aqi_threshold']} (0 = –≤—Å–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)"
        text += f"**–ü–æ—Ä–æ–≥ AQI –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** {escape_markdown_v2(aqi_threshold_text)}\n"
        
        await update.message.reply_markdown_v2(text)
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–∞–≤ /subscribe.")

def _get_aqi_category(aqi: int) -> tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è AQI."""
    if aqi <= 50:
        return "–•–æ—Ä–æ—à–æ", "üü¢"
    elif aqi <= 100:
        return "–£–º–µ—Ä–µ–Ω–Ω–æ", "üü°"
    elif aqi <= 150:
        return "–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø", "üü†"
    elif aqi <= 200:
        return "–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ", "üî¥"
    elif aqi <= 300:
        return "–û—á–µ–Ω—å –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ", "üü£"
    else:
        return "–û–ø–∞—Å–Ω–æ", "üü§"
